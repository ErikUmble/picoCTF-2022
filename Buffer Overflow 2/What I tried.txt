I first found target address of win as: 0x08049296
Then I tested different input lengths, with 107 bytes being the longest before
segmentation fault; so I assumed the return address is the next 4 bytes,
then we would have 4 bytes for arg1 and another 4 bytes for arg2.
This did not work.

Then with gdb, I added a breakpoint in vuln, just before the return.
At the breakpoint, I used 
	info frame
to find that the return address was stored at 0xffffb6ec which normally holds
0x08049348 to return to main, where it was called from.
I looked at x/30x 0xffffb600 during the breakpoint for different runs with 
longer and longer inputs, but none of them were changing it.
x/10x $sp revealed that the input was getting added upward in memory, while 
sp was at 0xffffb660, so we needed to go downward. So then I tried to instead
overflow into main's return address.
So I added another checkpoint in main, re-ran and checked the info frame
and found that the eip = return address location is 0xffffb71c, so that is the 
location I should be watching during the experiments.
Then I ran again with input pwn.cyclic(512), and at the return address location,
the value 0x62616170 was stored. So I checked pwn.cyclic_find(0x62616170) = 160
realizing that the I'd need to send 159 junk bytes before the target address and
arg1, arg2.
This did not work. After some stack experiments, I think using 160 junk bytes would be better.

I realized that the segmentation fault happening at the 108th byte was still a problem.
This problematic memory pointer is at address is 0xffffb6e7
So I checked what this value normally is using gdb, and it should be 0xffb70808
So I tried repeating that byte sequence as the junk bytes, but got another error

------------------------------------
Coming back for a try 2 after a week
-----------------------------------
I immediately ran it with input cyclic(512) to find that it seg faults at 112

so I tried 
(gdb) run < <(echo -ne "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\x96\x92\x04\x08\r\xf0\xfe\xca\r\xf0\r\xf0")
This gave an error of trying to access memory 0xf00df00d.
It turns out, I needed to add a 4 byte padding before the arguments, to block out the base pointer and instead put the arguments in the correct locations. (This was basically derived from https://tcode2k16.github.io/blog/posts/picoctf-2018-writeup/binary-exploitation/#buffer-overflow-2
which was the identical challenge a few years ago, just with different target address and argumetents. 

Finally!
picoCTF{argum3nt5_4_d4yZ_4b24a3aa}
-----------------------------------

This answer is helpful:
https://reverseengineering.stackexchange.com/questions/13928/managing-inputs-for-payload-injection

This might help"
https://tcode2k16.github.io/blog/posts/picoctf-2018-writeup/binary-exploitation/#buffer-overflow-3
It lookes like they basically reused the buffer overflow challenge series from 2018, so maybe use this as a guide. 

especially:
	(gdb) run < <(echo -ne "\xef\xbe\xad\xde")
and:
	echo -ne "\xef\xbe\xad\xde" | nc -vv localhost 666
and (to keep stdin open): 
	(echo -ne "\xef\xbe\xad\xde"; cat) | nc -vv localhost 666
